# -*- coding: utf-8 -*-
"""Movie Reviews Using TF-IDF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UqWGs6_N1IXNkk1YuiAJXMNkcOtpJaW4
"""

import numpy as np 
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
import nltk
import re
import string
from nltk.stem import WordNetLemmatizer

test_csv = pd.read_csv('test_data (1).csv') 
train_csv = pd.read_csv('train_data (1).csv')

nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('omw-1.4')

#penghapusan stopword dan lemmatisasi
stopwords = nltk.corpus.stopwords.words('english')
lemmatizer = WordNetLemmatizer()

train_csv.tail()

train_X_non = train_csv['0']    # '0' mengacu pada teks ulasan
train_y = train_csv['1']   # '1' sesuai dengan Label (1 - positif dan 0 - negatif)
test_X_non = test_csv['0']
test_y = test_csv['1']
train_X=[]
test_X=[]

"""# Teks Prepocessing

"""

for i in range(0, len(train_X_non)):
    review = re.sub('[^a-zA-Z]', ' ', train_X_non[i])
    review = review.lower()
    review = review.split()
    review = [lemmatizer.lemmatize(word) for word in review if not word in set(stopwords)]
    review = ' '.join(review)
    train_X.append(review)

for i in range(0, len(test_X_non)):
    review = re.sub('[^a-zA-Z]', ' ', test_X_non[i])
    review = review.lower()
    review = review.split()
    review = [lemmatizer.lemmatize(word) for word in review if not word in set(stopwords)]
    review = ' '.join(review)
    test_X.append(review)

train_X[10]

"""Kita dapat melihat bahwa tanda baca dihilangkan dan semua stopword juga dihilangkan. Teks ini sekarang dapat digunakan untuk melatih classifier.

#  TF-IDF Vectorizer
"""

tf_idf = TfidfVectorizer()
#menerapkan tf idf ke data pelatihan
X_train_tf = tf_idf.fit_transform(train_X)
#menerapkan tf idf ke data pelatihan

X_train_tf = tf_idf.transform(train_X)

print("n_samples: %d, n_features: %d" % X_train_tf.shape) #memeriksa sample dan fitur

#mengubah data uji menjadi matriks tf-idf
X_test_tf = tf_idf.transform(test_X)

print("n_samples: %d, n_features: %d" % X_train_tf.shape)

"""# Naive Bayes Classifier"""

#pengklasifikasi naive bayes
naive_bayes_classifier = MultinomialNB()
naive_bayes_classifier.fit(X_train_tf, train_y)

#predicted y
y_pred = naive_bayes_classifier.predict(X_test_tf)

"""Prediksi selesai. Sekarang,mencetak laporan klasifikasi. """

print(metrics.classification_report(test_y, y_pred, target_names=['Positive', 'Negative']))

print("Confusion matrix:")   #periksa matriks confusion
print(metrics.confusion_matrix(test_y, y_pred))

"""# Uji prediksi pada reviews clasifier TF IDF"""

#Melakukan Tes Predikai
test = [" really looking forward movie based preview press received viewing terribly disappointed slum totally unfunny film mixed todd solondz type disturbing family reality sans todd brand humor story drag along scene worse last maybe missed point film example every girl growing experience glad man "]

review = re.sub('[^a-zA-Z]', ' ', test[0])
review = review.lower()
review = review.split()
review = [lemmatizer.lemmatize(word) for word in review if not word in set(stopwords)]
test_processed =[ ' '.join(review)]

test_processed  #melihat teks yang diproses

test_input = tf_idf.transform(test_processed)
test_input.shape

#0= bad review
#1= good review
res=naive_bayes_classifier.predict(test_input)[0]
if res==1:
    print("Good Review")
elif res==0:
    print("Bad Review")